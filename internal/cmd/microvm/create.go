package microvm

import (
	"errors"
	"fmt"

	"github.com/urfave/cli/v2"
	"go.uber.org/zap"

	"github.com/weaveworks-liquidmetal/fl/pkg/app"
)

const (
	defaultNamespace   = "default"
	defaultVCPU        = 2
	defaultMemoryMb    = 2048
	defaultKernelImage = "ghcr.io/weaveworks/flintlock-kernel:5.10.77"
	defaultKernelFile  = "boot/vmlinux"
	defaultRootImage   = "ghcr.io/weaveworks/capmvm-kubernetes:1.21.8"
)

func newCreateCommand() *cli.Command {
	createInput := &app.CreateInput{}
	networkInterfaces := &cli.StringSlice{}
	metadataFromFile := &cli.StringSlice{}

	cmd := &cli.Command{
		Name:  "create",
		Usage: "create a new microvm",
		Before: func(ctx *cli.Context) error {
			if createInput.Name != "" && createInput.NameAutogenerate {
				return errors.New("only one of --name or --name-autoegenarate can be specified")
			}

			if createInput.Name == "" && !createInput.NameAutogenerate {
				return errors.New("you must supply one of --name or --name-autoegenarate")
			}

			return nil
		},
		Action: func(ctx *cli.Context) error {
			createInput.NetworkInterfaces = networkInterfaces.Value()
			createInput.MetadataFromFile = metadataFromFile.Value()
			a := app.New(zap.S().With("action", "create"))

			createInput.NetworkInterfaces = networkInterfaces.Value()
			createInput.MetadataFromFile = metadataFromFile.Value()

			if err := a.Create(ctx.Context, createInput); err != nil {
				return fmt.Errorf("creating microvm: %s", err)
			}

			return nil
		},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:        "host",
				Usage:       "the flintlock host to create the microvm on",
				Destination: &createInput.Host,
				Required:    true,
			},
			&cli.StringFlag{
				Name:        "name",
				Usage:       "the name of the microvm, cannot be specified if using name-autogenerate",
				Destination: &createInput.Name,
			},
			&cli.BoolFlag{
				Name:        "name-autogenerate",
				Usage:       "if true a name is autogenerated for the microvm",
				Value:       false,
				Destination: &createInput.NameAutogenerate,
			},
			&cli.StringFlag{
				Name:        "namespace",
				Usage:       "the namespace for the microvm",
				Destination: &createInput.Namespace,
				Value:       defaultNamespace,
			},
			&cli.IntFlag{
				Name:        "vcpu",
				Usage:       "the number of vcpus",
				Value:       defaultVCPU,
				Destination: &createInput.VCPU,
			},
			&cli.IntFlag{
				Name:        "memory",
				Usage:       "the memory in mb",
				Value:       defaultMemoryMb,
				Destination: &createInput.MemoryInMb,
			},
			&cli.StringFlag{
				Name:        "kernel-image",
				Usage:       "the image to use for the kernel",
				Destination: &createInput.KernelImage,
				Value:       defaultKernelImage,
			},
			&cli.BoolFlag{
				Name:        "add-netconf",
				Usage:       "automatically add network configuration to the kernel cmd line",
				Destination: &createInput.KernelAddNetConf,
				Value:       true,
			},
			&cli.StringFlag{
				Name:        "kernel-filename",
				Usage:       "name of the kernel file in the image",
				Destination: &createInput.KernelFileName,
				Value:       defaultKernelFile,
			},
			&cli.StringFlag{
				Name:        "root-image",
				Usage:       "the image to use for the root volume",
				Destination: &createInput.RootImage,
				Value:       defaultRootImage,
			},
			&cli.StringFlag{
				Name:        "initrd-image",
				Usage:       "the image to use for the initial ramdisk",
				Destination: &createInput.InitrdImage,
			},
			&cli.StringFlag{
				Name:        "initrd-filename",
				Usage:       "name of the file in the image to use for the initial ramdisk",
				Destination: &createInput.InitrdFilename,
			},
			&cli.StringSliceFlag{
				Name:        "network-interface",
				Usage:       "specify the network interfaces to attach. In the following format: name:type:[macaddress]:[ipaddress]",
				Destination: networkInterfaces,
			},
			&cli.StringSliceFlag{
				Name:        "metadata-from-file",
				Usage:       "specify metadata to be available to your microvm. In the following format key=pathtofile",
				Destination: metadataFromFile,
			},
			&cli.StringFlag{
				Name:        "metadata-hostname",
				Usage:       "the hostname of the the microvm",
				Destination: &createInput.Metadata.Hostname,
			},
			&cli.StringFlag{
				Name:        "metadata-ssh-key-file",
				Usage:       "an ssh key to use",
				Destination: &createInput.Metadata.SSHKeyFile,
			},
			&cli.BoolFlag{
				Name:        "metadata-resolvd-fix",
				Usage:       "include a systemd-resolvd fix for container root volumes",
				Destination: &createInput.Metadata.ResolvdFix,
				Value:       true,
			},
			&cli.StringFlag{
				Name:        "metadata-final-message",
				Usage:       "set the cloud-init final message",
				Destination: &createInput.Metadata.Message,
			},
		},
	}

	//TODO: additional command line args for kernel
	//TODO: add additional volumes

	return cmd
}
